{"version":3,"file":"static/js/330.479a34e5.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactFormBlock\":\"ContactForm_contactFormBlock__XJFtZ\",\"contactFormItem\":\"ContactForm_contactFormItem__hO2j7\",\"contactFormInput\":\"ContactForm_contactFormInput__eC5HJ\",\"btnContactForm\":\"ContactForm_btnContactForm__WiQzm\"};","import { useState } from 'react';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nexport default function ContactForm() {\n\n    const contacts = useSelector(store => store.contacts.items);\n    const dispatch = useDispatch();\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameId = nanoid();\n    const numberId = nanoid()\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        switch (name) {\n\n            case 'name':\n                setName(value);\n                break;\n\n            case 'number':\n                setNumber(value);\n                break\n\n            default:\n                return;\n        }\n    }\n\n    const isDublicate = (name) => {\n        const resault = contacts.find(item => item.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n        return resault;\n    }\n\n    const handleContact = (e) => {\n        e.preventDefault();\n        if (isDublicate(name)) {\n            return alert(`${name} is already in contacts.`);\n        }\n        dispatch(addContact({ name, number }));\n        setName('');\n        setNumber('');\n    }\n\n    return (\n        <div className={css.contactForm}>\n            <form onSubmit={handleContact}>\n                <div className={css.contactFormBlock}>\n                    <label className={css.contactFormItem} htmlFor={nameId}>\n                        Name\n                    </label>\n                    <input className={css.contactFormInput}\n                        id={nameId}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        value={name}\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className={css.contactFormBlock}>\n                    <label className={css.contactFormItem} htmlFor={numberId}>\n                        Number\n                    </label>\n                    <input className={css.contactFormInput}\n                        id={numberId}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        value={number}\n                        onChange={handleChange}\n                    />\n                </div>\n                <button className={css.btnContactForm}>Add contact </button>\n            </form>\n        </div>\n    );\n}","export const getContacts = ({contacts}) => contacts.items;\n\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error});\n\nexport const getAllContacts = ({ contacts }) => {\n        return contacts.items;\n}","// extracted by mini-css-extract-plugin\nexport default {\"btnContactList\":\"ContactList_btnContactList__XIqTd\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\"};","import React, { useEffect } from \"react\";\n// import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/contacts/contacts-operations';\nimport { getAllContacts } from \"redux/contacts/contacts-selectors\";\nimport css from '../ContactList/ContactList.module.css';\n\nexport default function ContactList() {\n\n  const contacts = useSelector(getAllContacts);\n  const filterValue = useSelector(store => store.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n  const getFilteredContacts = () => {\n    if (!filterValue) {\n      return contacts;\n    }\n\n    const normalizedFilter = filterValue.toLocaleLowerCase();\n    const filteredContacts = contacts.filter(({ name }) => {\n      const normalizedName = name.toLocaleLowerCase();\n      const resault = normalizedName.includes(normalizedFilter);\n      return resault;\n    });\n\n    return filteredContacts;\n  }\n\n  const filterContacts = getFilteredContacts();\n\n  const items = filterContacts.map(({ name, number, id }) => {\n    return (\n      <li className={css.contactsItem} key={id}>\n        {name}: {number}{' '}\n        <button className={css.btnContactList} onClick={() => dispatch(deleteContact(id))}>Delete</button>\n      </li>\n    );\n  });\n  return <ul>{items}</ul>;\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filter-slice';\nimport css from '../Filter/Filter.module.css';\n\nexport default function Filter() {\n\n    const filterValue = useSelector(store => store.filter)\n    const dispatch = useDispatch();\n\n    const handleChange = e => {\n        const { value } = e.target;\n        dispatch(setFilter(value))\n    }\n\n    return (\n        <input className={css.filterInput} type=\"text\" name=\"filter\" value={filterValue} onChange={handleChange}></input>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__gVK0J\",\"contactsTitle\":\"Contacts_contactsTitle__9axPf\",\"contactsFilter\":\"Contacts_contactsFilter__5UvTi\"};","\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport css from '../Contacts/Contacts.module.css'\n\n\nconst Contacts = () => {\n\n    return (\n        <div className={css.contacts}>\n            <h1 className={css.contactsTitle}>Phonebook</h1>\n            <ContactForm></ContactForm>\n\n            <h2 className={css.contactsFilter}>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </div>\n    );\n};\nexport default Contacts;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","contacts","useSelector","store","items","dispatch","useDispatch","useState","name","setName","number","setNumber","nameId","nanoid","numberId","handleChange","e","target","value","className","css","onSubmit","preventDefault","find","item","toLocaleLowerCase","isDublicate","alert","addContact","htmlFor","id","type","pattern","title","required","onChange","getAllContacts","ContactList","filterValue","filter","useEffect","fetchContacts","normalizedFilter","includes","getFilteredContacts","map","onClick","deleteContact","Filter","setFilter","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}