{"version":3,"file":"static/js/822.ce05501f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/initialState.js","components/RegisterForm/fields.js","components/RegisterForm/RegisterForm.jsx","webpack://react-homework-template/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/shared/components/TextField/TextField.module.css?2d5d","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registerForm\":\"RegisterForm_registerForm__CXWAG\",\"btnRegisterForm\":\"RegisterForm_btnRegisterForm__oil5H\"};","const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n}\n\nexport default initialState;","const fields = {\n    name: {\n        label: \"User name\",\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Enter user name\",\n        required: true,\n    },\n    email: {\n        label: \"User email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Enter user email\",\n        required: true,\n    },\n    password: {\n        label: \"User password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Enter user password (min 6 symbols)\",\n        required: true,\n    }\n}\n\nexport default fields;","import { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { nanoid } from \"nanoid\";\n\nimport useForm from 'shared/hooks/useForm';\n\nimport TextField from \"shared/components/TextField/TextField\";\nimport css from '../RegisterForm/RegisterForm.module.css';\n\nimport initialState from \"./initialState\";\nimport fields from \"./fields\";\n\nconst RegisterForm = ({ onSubmit }) => {\n    const { state, handleChange, handleSubmit } = useForm({ initialState, onSubmit });\n\n    const nameId = useMemo(() => nanoid(), []);\n    const emailId = useMemo(() => nanoid(), []);\n    const passwordId = useMemo(() => nanoid(), []);\n\n    const { name, email, password } = state;\n\n    return (\n        <form className={css.registerForm} onSubmit={handleSubmit}>\n            <TextField id={nameId} value={name} handleChange={handleChange} {...fields.name} />\n            <TextField id={emailId} value={email} handleChange={handleChange} {...fields.email} />\n            <TextField id={passwordId} value={password} handleChange={handleChange} {...fields.password} />\n            <button className={css.btnRegisterForm}>Register</button>\n        </form>\n    )\n}\n\nexport default RegisterForm;\n\nRegisterForm.defaultProps = {\n    onSubmit: () => { }\n}\n\nRegisterForm.propTypes = {\n    onSubmit: PropTypes.func,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"registerTitle\":\"RegisterPage_registerTitle__krV3K\"};","import { useDispatch, useSelector } from \"react-redux\";\nimport { signup } from \"redux/auth/auth-operations\";\nimport { isLogin } from \"redux/auth/auth-selectors\";\n// react-router\nimport { Navigate } from \"react-router-dom\";\n// components\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport css from '../RegisterPage/RegisterPage.module.css';\n\nexport default function RegisterPage() {\n    const dispatch = useDispatch();\n    const isUserLogin = useSelector(isLogin);\n\n    const onRegister = (data) => {\n        dispatch(signup(data));\n    }\n\n    if (isUserLogin) {\n        return <Navigate to=\"/contacts\" />\n    }\n\n    return (\n        <div className='container'>\n            <h1 className={css.registerTitle}>Register page</h1>\n            <RegisterForm onSubmit={onRegister} />\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"textFieldFormBlock\":\"TextField_textFieldFormBlock__+o7GF\",\"textFieldItem\":\"TextField_textFieldItem__QWiV7\",\"textFieldInput\":\"TextField_textFieldInput__DZa3V\"};","import PropTypes from \"prop-types\";\nimport css from '../TextField/TextField.module.css'\n\n\nconst TextField = ({ id, label, value, name, handleChange, type, checked, className, placeholder, required, pattern }) => {\n\n\n    return (\n        <div className={css.textFieldFormBlock}>\n            {label && <label className={css.textFieldItem} htmlFor={id}>{label}</label>}\n            <input className={css.textFieldInput} id={id} value={value} checked={checked} name={name} onChange={handleChange} type={type} placeholder={placeholder} required={required} pattern={pattern} />\n        </div>\n    )\n}\n\nexport default TextField;\n\nTextField.defaultProps = {\n    type: \"text\",\n    required: false,\n}\n\nTextField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    handleChange: PropTypes.func.isRequired,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    placeholder: PropTypes.string,\n    required: PropTypes.bool,\n    pattern: PropTypes.string,\n}","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({ target }) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["name","email","password","label","type","placeholder","required","RegisterForm","onSubmit","useForm","initialState","state","handleChange","handleSubmit","nameId","useMemo","nanoid","emailId","passwordId","className","css","TextField","id","value","fields","defaultProps","RegisterPage","dispatch","useDispatch","useSelector","isLogin","to","data","signup","checked","pattern","htmlFor","onChange","useState","setState","target","newValue","prevState","e","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}