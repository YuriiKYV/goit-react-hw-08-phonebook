{"version":3,"file":"static/js/605.f685a553.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/initialState.js","components/LoginForm/fields.js","components/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.jsx","webpack://react-homework-template/./src/shared/components/TextField/TextField.module.css?2d5d","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"LoginForm_loginForm__+koOR\",\"btnLoginForm\":\"LoginForm_btnLoginForm__o6B18\"};","const initialState = {\n    email: \"\",\n    password: \"\",\n}\n\nexport default initialState;","const fields = {\n    email: {\n        label: \"User email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Enter user email\",\n        required: true,\n    },\n    password: {\n        label: \"User password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Enter user password (min 6 symbols)\",\n        required: true,\n    }\n}\n\nexport default fields;","import { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { nanoid } from \"nanoid\";\nimport css from \"../LoginForm/LoginForm.module.css\"\n\nimport useForm from 'shared/hooks/useForm';\n\nimport TextField from \"shared/components/TextField/TextField\";\n\nimport initialState from \"./initialState\";\nimport fields from \"./fields\";\n\nconst LoginForm = ({ onSubmit }) => {\n    const { state, handleChange, handleSubmit } = useForm({ initialState, onSubmit });\n\n\n    const emailId = useMemo(() => nanoid(), []);\n    const passwordId = useMemo(() => nanoid(), []);\n\n    const { email, password } = state;\n\n    return (\n        <form className={css.loginForm} onSubmit={handleSubmit}>\n            <TextField id={emailId} value={email} handleChange={handleChange} {...fields.email} />\n            <TextField id={passwordId} value={password} handleChange={handleChange} {...fields.password} />\n            <button className={css.btnLoginForm}>Login</button>\n        </form>\n    )\n}\n\nexport default LoginForm;\n\nLoginForm.defaultProps = {\n    onSubmit: () => { }\n}\n\nLoginForm.propTypes = {\n    onSubmit: PropTypes.func,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"loginPage\":\"LoginPage_loginPage__eZ30b\",\"loginTitle\":\"LoginPage_loginTitle__DtueA\"};","// import css from '../LoginPage/LoginPage.module.css';\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"redux/auth/auth-operations\";\n\nimport LoginForm from 'components/LoginForm/LoginForm';\n\nimport css from '../LoginPage/LoginPage.module.css';\n\nexport default function LoginPage() {\n    const dispatch = useDispatch();\n\n\n    const onLogin = (data) => {\n        dispatch(login(data));\n    }\n\n\n\n    return (\n        <div className={css.loginPage}>\n            <h1 className={css.loginTitle}>Login page</h1>\n            <LoginForm onSubmit={onLogin} />\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"textFieldFormBlock\":\"TextField_textFieldFormBlock__+o7GF\",\"textFieldItem\":\"TextField_textFieldItem__QWiV7\",\"textFieldInput\":\"TextField_textFieldInput__DZa3V\"};","import PropTypes from \"prop-types\";\nimport css from '../TextField/TextField.module.css'\n\n\nconst TextField = ({ id, label, value, name, handleChange, type, checked, className, placeholder, required, pattern }) => {\n\n\n    return (\n        <div className={css.textFieldFormBlock}>\n            {label && <label className={css.textFieldItem} htmlFor={id}>{label}</label>}\n            <input className={css.textFieldInput} id={id} value={value} checked={checked} name={name} onChange={handleChange} type={type} placeholder={placeholder} required={required} pattern={pattern} />\n        </div>\n    )\n}\n\nexport default TextField;\n\nTextField.defaultProps = {\n    type: \"text\",\n    required: false,\n}\n\nTextField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    handleChange: PropTypes.func.isRequired,\n    type: PropTypes.string,\n    className: PropTypes.string,\n    placeholder: PropTypes.string,\n    required: PropTypes.bool,\n    pattern: PropTypes.string,\n}","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({ target }) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["email","password","label","name","type","placeholder","required","LoginForm","onSubmit","useForm","initialState","state","handleChange","handleSubmit","emailId","useMemo","nanoid","passwordId","className","css","TextField","id","value","fields","defaultProps","LoginPage","dispatch","useDispatch","data","login","checked","pattern","htmlFor","onChange","useState","setState","target","newValue","prevState","e","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}